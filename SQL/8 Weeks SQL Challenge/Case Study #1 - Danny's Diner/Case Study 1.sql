-- 1. What is the total amount each customer spent at the restaurant?
WITH COMBINED AS
	(SELECT *
		FROM DANNYS_DINER.MENU
		INNER JOIN DANNYS_DINER.SALES USING (PRODUCT_ID))
		
SELECT CUSTOMER_ID,
	SUM(PRICE) AS TOTAL_SPENT
FROM COMBINED
GROUP BY 1
ORDER BY 2 DESC 

-- 2. How many days has each customer visited the restaurant?
SELECT CUSTOMER_ID,
	COUNT(DISTINCT ORDER_DATE) AS N_VISTS
FROM DANNYS_DINER.SALES
GROUP BY 1 

-- 3. What was the first item from the menu purchased by each customer?
WITH COMBINED AS
	(SELECT *
		FROM DANNYS_DINER.SALES
		INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID))
		
SELECT CUSTOMER_ID,
	PRODUCT_NAME AS FIRST_ITEM_PURCHASED
FROM
	(SELECT *,
			RANK() OVER(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) AS RNK
		FROM COMBINED) A
WHERE RNK = 1 

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
WITH COMBINED AS
		(SELECT *
			FROM DANNYS_DINER.SALES
			INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID))
			
SELECT PRODUCT_NAME,
	COUNT(*) AS N_TIMES
FROM COMBINED
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1

-- 5. Which item was the most popular for each customer?
WITH COMBINED AS
	(SELECT *
		FROM DANNYS_DINER.SALES
		INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)),
		
	POPULARITY AS
	(SELECT CUSTOMER_ID,
			PRODUCT_NAME,
			COUNT(*) AS N_TIMES
		FROM COMBINED
		GROUP BY 1,2),
		
	RANKED AS
	(SELECT *,
			RANK() OVER (PARTITION BY CUSTOMER_ID ORDER BY N_TIMES DESC) AS RNK
		FROM POPULARITY)
		
SELECT *
FROM RANKED
WHERE RNK = 1 

-- 6. Which item was purchased first by the customer after they became a member?
WITH COMBINED AS
		(SELECT *
			FROM DANNYS_DINER.MEMBERS
			INNER JOIN DANNYS_DINER.SALES USING (CUSTOMER_ID)
			INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)
			WHERE ORDER_DATE > JOIN_DATE ),
			
		RANKED AS
		(SELECT *,
				ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) AS ROW_NUM
			FROM COMBINED)
			
SELECT CUSTOMER_ID,
	PRODUCT_NAME
FROM RANKED WHERE ROW_NUM = 1 
	
-- 7. Which item was purchased just before the customer became a member?
WITH COMBINED AS
	(SELECT *
		FROM DANNYS_DINER.MEMBERS
		INNER JOIN DANNYS_DINER.SALES USING (CUSTOMER_ID)
		INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)
		WHERE ORDER_DATE < JOIN_DATE ),
	RANKED AS
	(SELECT *,
			ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE DESC) AS ROW_NUM
		FROM COMBINED)
		
SELECT CUSTOMER_ID,
	PRODUCT_NAME
FROM RANKED
WHERE ROW_NUM = 1
	
-- 8. What is the total items and amount spent for each member before they became a member?
WITH BEFORE_MEMBER AS
	(SELECT *
		FROM DANNYS_DINER.MEMBERS
		INNER JOIN DANNYS_DINER.SALES USING (CUSTOMER_ID)
		INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)
		WHERE ORDER_DATE < JOIN_DATE )
		
SELECT CUSTOMER_ID,
	COUNT(*) AS N_TIMES,
	SUM(PRICE) AS TOTAL_SPENT
FROM BEFORE_MEMBER
GROUP BY 1

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH SPENDING AS
	(SELECT *
		FROM DANNYS_DINER.SALES
		INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)),
		
	POINTS AS
	(SELECT CUSTOMER_ID,
			PRODUCT_NAME,
			PRICE,
			CASE
				WHEN PRODUCT_NAME = 'sushi' THEN PRICE * 10 * 2
				ELSE PRICE * 10
			END AS NUM_POINTS
		FROM SPENDING)
		
SELECT CUSTOMER_ID,
	SUM(NUM_POINTS) AS TOTAL_POINTS
FROM POINTS
GROUP BY 1
ORDER BY 2 DESC 

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH FIRST_WEEK AS
	(SELECT *,
			CAST(JOIN_DATE + INTERVAL '1 week' AS DATE) AS FIRST_WEEK
		FROM DANNYS_DINER.MEMBERS),
		
	COMBINED AS
	(SELECT *
		FROM FIRST_WEEK
		INNER JOIN DANNYS_DINER.SALES USING (CUSTOMER_ID)
		INNER JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)
		WHERE (ORDER_DATE < '2021-02-01')
			AND (ORDER_DATE > JOIN_DATE) ),
			
	SPENDING AS
	(SELECT CUSTOMER_ID,
			CASE
				WHEN ORDER_DATE BETWEEN JOIN_DATE AND FIRST_WEEK THEN PRICE * 10 * 2
				WHEN (ORDER_DATE NOT BETWEEN JOIN_DATE AND FIRST_WEEK) AND (PRODUCT_NAME = 'sushi') THEN PRICE * 10 * 2
				ELSE PRICE * 10
			END AS NUM_POINTS
		FROM COMBINED)
		
SELECT CUSTOMER_ID,
	SUM(NUM_POINTS) AS TOTAL_POINTS
FROM SPENDING
GROUP BY 1
ORDER BY 2 DESC 

-- Bonus Question 1: Join All the Things
WITH COMBINED AS
	(SELECT *
		FROM DANNYS_DINER.SALES
		LEFT JOIN DANNYS_DINER.MEMBERS USING (CUSTOMER_ID)
		LEFT JOIN DANNYS_DINER.MENU USING (PRODUCT_ID))
		
SELECT CUSTOMER_ID,
	ORDER_DATE,
	PRODUCT_NAME,
	PRICE,
	CASE
		WHEN (JOIN_DATE IS NULL) OR (ORDER_DATE < JOIN_DATE) THEN 'N'
		WHEN (ORDER_DATE >= JOIN_DATE) THEN 'Y'
	END AS MEMBER
FROM COMBINED
ORDER BY 1,2,3,4 

-- Bonus Question 2: Rank All the Things
WITH COMBINED AS
	(SELECT *
		FROM DANNYS_DINER.SALES
		LEFT JOIN DANNYS_DINER.MEMBERS USING (CUSTOMER_ID)
		LEFT JOIN DANNYS_DINER.MENU USING (PRODUCT_ID)),
		
	COMPLETE AS
	(SELECT CUSTOMER_ID,
			ORDER_DATE,
			PRODUCT_NAME,
			PRICE,
			CASE
				WHEN (JOIN_DATE IS NULL) OR (ORDER_DATE < JOIN_DATE) THEN 'N'
				WHEN (ORDER_DATE >= JOIN_DATE) THEN 'Y'
			END AS MEMBER
		FROM COMBINED)
		
SELECT *, 
-- need to partition by member as well since ranking needs to start from 1 for each customer_id when member = 'Y'
 CASE
	WHEN MEMBER = 'Y' THEN RANK() OVER(PARTITION BY CUSTOMER_ID, MEMBER ORDER BY ORDER_DATE, PRICE DESC)
	ELSE NULL
	END AS RANKING
FROM COMPLETE
