/*
	High Level Sales Analysis
*/

-- 1. What was the total quantity sold for all products?
SELECT SUM(QTY) AS TOTAL_QUANTITY
FROM BALANCED_TREE.SALES

-- 2. What is the total generated revenue for all products before discounts?
SELECT SUM(QTY * PRICE) AS TOTAL_REVENUE
FROM BALANCED_TREE.SALES

-- 3. What was the total discount amount for all products?
SELECT SUM(QTY * PRICE * DISCOUNT/100) AS TOTAL_DISCOUNT
FROM BALANCED_TREE.SALES

/*
	Transaction Analysis
*/

-- 1. How many unique transactions were there?
SELECT COUNT(DISTINCT TXN_ID) AS UNIQUE_TXNS
FROM BALANCED_TREE.SALES

-- 2. What is the average unique products purchased in each transaction?
SELECT TXN_ID,
	COUNT(DISTINCT PROD_ID) AS UNIQUE_PRODUCTS
FROM BALANCED_TREE.SALES
GROUP BY 1

-- 3. What are the 25th, 50th and 75th percentile values for the revenue per transaction?
-- assuming after discounts
WITH REV_PER_TXN AS
	(SELECT TXN_ID,
			CAST(SUM((1 - DISCOUNT / 100) * PRICE * QTY) AS numeric) AS REVENUE
		FROM BALANCED_TREE.SALES
		GROUP BY 1)
		
SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY REVENUE) AS P25,
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY REVENUE) AS P50,
	PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY REVENUE) AS P75
FROM REV_PER_TXN

-- 4. What is the average discount value per transaction?
SELECT TXN_ID,
	ROUND(AVG(PRICE * DISCOUNT / 100), 2) AS AVG_DISCOUNT
FROM BALANCED_TREE.SALES
GROUP BY 1

-- 5. What is the percentage split of all transactions for members vs non-members?
WITH MEMBERSHIP AS
	(SELECT DISTINCT TXN_ID,
			MEMBER
		FROM BALANCED_TREE.SALES)
		
SELECT ROUND(CAST(SUM(CASE
							WHEN MEMBER = TRUE THEN 1
							ELSE 0
							END) AS numeric) / COUNT(*) * 100, 1) AS MEMBER_PERC,
	ROUND((1 - CAST(SUM(CASE
							WHEN MEMBER = TRUE THEN 1
							ELSE 0
							END) AS numeric) / COUNT(*)) * 100, 1) AS NON_MEMBER_PERC
FROM MEMBERSHIP

-- 6. What is the average revenue for member transactions and non-member transactions?
-- assuming after discount
SELECT ROUND(AVG(CASE
					WHEN MEMBER = TRUE THEN (1 - DISCOUNT / 100) * PRICE * QTY
					ELSE 0
					END), 2) AS AVG_MEMBER_REV,
					
	ROUND(AVG(CASE
				WHEN MEMBER = FALSE THEN (1 - DISCOUNT / 100) * PRICE * QTY
				ELSE 0
				END), 2) AS AVG_NON_MEMBER_REV
FROM BALANCED_TREE.SALES

/*
	Product Analysis
*/

-- 1. What are the top 3 products by total revenue before discount?
WITH COMBINED AS
	(SELECT PRODUCT_NAME,
			QTY * S.PRICE AS REVENUE
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID)
		
SELECT PRODUCT_NAME,
	SUM(REVENUE) AS TOTAL_REVENUE
FROM COMBINED
GROUP BY 1
ORDER BY 2 DESC
LIMIT 3

-- 2. What is the total quantity, revenue and discount for each segment?
WITH COMBINED AS
	(SELECT SEGMENT_NAME,
			QTY,
			S.PRICE,
			DISCOUNT
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID)
		
SELECT SEGMENT_NAME,
	SUM(QTY) AS TOTAL_QUANTITY,
	SUM(PRICE * QTY) AS TOTAL_REVENUE,
	ROUND(SUM(CAST(DISCOUNT AS numeric) / 100 * PRICE), 2) AS TOTAL_DISCOUNT
FROM COMBINED
GROUP BY 1
		
-- 3. What is the top selling product for each segment?
-- assuming after discount
WITH COMBINED AS
	(SELECT SEGMENT_NAME,
			PRODUCT_NAME,
			QTY,
			S.PRICE,
			CAST(DISCOUNT AS numeric)
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID),
		
	REVENUE_AFTER_DISCOUNT AS
	(SELECT SEGMENT_NAME,
			PRODUCT_NAME,
			ROUND(SUM(QTY * PRICE * (1 - DISCOUNT / 100)), 2) AS REVENUE
		FROM COMBINED
		GROUP BY 1, 2),
		
	RANKED AS
	(SELECT SEGMENT_NAME,
			PRODUCT_NAME,
			REVENUE,
			RANK() OVER(PARTITION BY SEGMENT_NAME ORDER BY REVENUE DESC) AS RNK
		FROM REVENUE_AFTER_DISCOUNT)
		
SELECT SEGMENT_NAME,
	PRODUCT_NAME,
	REVENUE
FROM RANKED
WHERE RNK = 1

-- 4. What is the total quantity, revenue and discount for each category?
WITH COMBINED AS
	(SELECT CATEGORY_NAME,
			QTY,
			S.PRICE,
			CAST(DISCOUNT AS numeric)
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID)
		
SELECT CATEGORY_NAME,
	SUM(QTY) AS TOTAL_QUANTITY,
	SUM(QTY * PRICE) AS TOTAL_REVENUE,
	ROUND(SUM(PRICE * DISCOUNT / 100), 2) AS TOTAL_DISCOUNT
FROM COMBINED
GROUP BY 1

-- 5. What is the top selling product for each category?
-- asumming 
WITH COMBINED AS
	(SELECT CATEGORY_NAME,
	 		PRODUCT_NAME, 
			QTY,
			S.PRICE,
			CAST(DISCOUNT AS numeric)
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID),
		
	REVENUE_AFTER_DISCOUNT AS
	(SELECT CATEGORY_NAME,
	 		PRODUCT_NAME,
			ROUND(SUM(QTY * PRICE * (1 - DISCOUNT / 100)), 2) AS REVENUE
		FROM COMBINED
		GROUP BY 1, 2),
		
	RANKED AS
	(SELECT CATEGORY_NAME,
	 		PRODUCT_NAME,
			REVENUE,
			RANK() OVER(PARTITION BY CATEGORY_NAME ORDER BY REVENUE DESC) AS RNK
		FROM REVENUE_AFTER_DISCOUNT)
		
SELECT CATEGORY_NAME,
	PRODUCT_NAME,
	REVENUE
FROM RANKED
WHERE RNK = 1

-- 6. What is the percentage split of revenue by product for each segment?
-- assuming after discount
WITH COMBINED AS
	(SELECT SEGMENT_NAME,
			PRODUCT_NAME,
			QTY,
			S.PRICE,
			CAST(DISCOUNT AS numeric)
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID),
		
	REVENUE_PER_PRODUCT AS
	(SELECT SEGMENT_NAME,
			PRODUCT_NAME,
			ROUND(SUM(QTY * PRICE * (1 - DISCOUNT / 100)), 2) AS PRODUCT_REVENUE
		FROM COMBINED
		GROUP BY 1, 2),
		
	REVENUE_PER_SEGMENT AS
	(SELECT SEGMENT_NAME,
			PRODUCT_NAME,
			PRODUCT_REVENUE,
			SUM(PRODUCT_REVENUE) OVER(PARTITION BY SEGMENT_NAME) AS SEGMENT_REVENUE
		FROM REVENUE_PER_PRODUCT)
		
SELECT SEGMENT_NAME,
	PRODUCT_NAME,
	PRODUCT_REVENUE,
	ROUND(PRODUCT_REVENUE / SEGMENT_REVENUE * 100, 1) AS REVENUE_SPLIT_PERC
FROM REVENUE_PER_SEGMENT
ORDER BY 1, 3 DESC

-- 7. What is the percentage split of revenue by segment for each category?
WITH COMBINED AS
	(SELECT CATEGORY_NAME,
			SEGMENT_NAME,
			QTY,
			S.PRICE,
			CAST(DISCOUNT AS numeric)
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID),
		
	REVENUE_PER_SEGMENT AS
	(SELECT CATEGORY_NAME,
			SEGMENT_NAME,
			ROUND(SUM(QTY * PRICE * (1 - DISCOUNT / 100)), 2) AS SEGMENT_REVENUE
		FROM COMBINED
		GROUP BY 1, 2),
		
	REVENUE_PER_CATEGORY AS
	(SELECT CATEGORY_NAME,
			SEGMENT_NAME,
			SEGMENT_REVENUE,
			SUM(SEGMENT_REVENUE) OVER(PARTITION BY CATEGORY_NAME) AS CATEGORY_REVENUE
		FROM REVENUE_PER_SEGMENT)
		
SELECT CATEGORY_NAME,
	SEGMENT_NAME,
	SEGMENT_REVENUE,
	ROUND(SEGMENT_REVENUE / CATEGORY_REVENUE * 100, 1) AS REVENUE_SPLIT_PERC
FROM REVENUE_PER_CATEGORY
ORDER BY 1, 3 DESC

-- 8. What is the percentage split of total revenue by category?
WITH COMBINED AS
	(SELECT CATEGORY_NAME,
			QTY,
			S.PRICE,
			CAST(DISCOUNT AS numeric)
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID),
		
	REVENUE_PER_CATEGORY AS
	(SELECT CATEGORY_NAME,
			ROUND(SUM(QTY * PRICE * (1 - DISCOUNT / 100)), 2) AS CATEGORY_REVENUE
		FROM COMBINED
		GROUP BY 1),
		
	TOTAL_REVENUE_CATEGORY AS
	(SELECT CATEGORY_NAME,
	 		CATEGORY_REVENUE,
			SUM(CATEGORY_REVENUE) OVER() AS TOTAL_CATEGORY_REVENUE
		FROM REVENUE_PER_CATEGORY)
		
SELECT CATEGORY_NAME,
	ROUND(CATEGORY_REVENUE / TOTAL_CATEGORY_REVENUE * 100, 1) AS REVENUE_SPLIT_PERC
FROM TOTAL_REVENUE_CATEGORY
ORDER BY 2 DESC

-- 9. What is the total transaction “penetration” for each product? 
--(hint: penetration = number of transactions where at least 1 quantity of a product was purchased divided by total number of transactions)
WITH COMBINED AS
	(SELECT PRODUCT_NAME,
			TXN_ID
		FROM BALANCED_TREE.SALES AS S
		LEFT JOIN BALANCED_TREE.PRODUCT_DETAILS AS P ON S.PROD_ID = P.PRODUCT_ID),
		
	N_SOLD AS
	(SELECT PRODUCT_NAME,
			CAST(COUNT(DISTINCT TXN_ID) AS numeric) AS COUNTS
		FROM COMBINED
		GROUP BY 1
		ORDER BY 2 DESC),
		
	TOTAL_TRANSACTIONS AS
	(SELECT CAST(COUNT(DISTINCT TXN_ID) AS numeric) AS TOTAL_TXNS
		FROM COMBINED),
		
	JOINED AS
	(SELECT PRODUCT_NAME,
			COUNTS,
			TOTAL_TXNS
		FROM N_SOLD
		JOIN TOTAL_TRANSACTIONS ON 1 = 1)
		
SELECT PRODUCT_NAME,
	ROUND(COUNTS / TOTAL_TXNS * 100, 1) AS PENETRATION
FROM JOINED
ORDER BY 2 DESC

-- 10. What is the most common combination of at least 1 quantity of any 3 products in a 1 single transaction?
-- Select the 3 item combination and the count of the amount of times items where bought together              
WITH PRODUCTS AS
	(SELECT TXN_ID,
			PRODUCT_NAME
		FROM BALANCED_TREE.SALES AS T1
		JOIN BALANCED_TREE.PRODUCT_DETAILS AS T2 ON T1.PROD_ID = T2.PRODUCT_ID)
		
SELECT T1.PRODUCT_NAME AS PRODUCT_1,
	T2.PRODUCT_NAME AS PRODUCT_2,
	T3.PRODUCT_NAME AS PRODUCT_3,
	COUNT(*) AS TIMES_BOUGHT_TOGETHER
FROM PRODUCTS AS T1
JOIN PRODUCTS AS T2 ON T1.TXN_ID = T2.TXN_ID
AND T1.PRODUCT_NAME < T2.PRODUCT_NAME
JOIN PRODUCTS AS T3 ON T1.TXN_ID = T3.TXN_ID
AND T2.TXN_ID = T3.TXN_ID
WHERE T1.PRODUCT_NAME < T3.PRODUCT_NAME AND T2.PRODUCT_NAME < T3.PRODUCT_NAME
GROUP BY T1.PRODUCT_NAME, T2.PRODUCT_NAME, T3.PRODUCT_NAME
ORDER BY 4 DESC
LIMIT 1