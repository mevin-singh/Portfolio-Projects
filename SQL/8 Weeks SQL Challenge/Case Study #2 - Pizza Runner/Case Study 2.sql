/* 
	A: Pizza Metrics
*/

-- Cleaning runner_orders
CREATE OR REPLACE VIEW RUNNER_ORDERS_CLEANED AS
	(SELECT ORDER_ID,
			RUNNER_ID,
			CASE
				WHEN PICKUP_TIME = 'null' THEN NULL
				ELSE CAST(PICKUP_TIME AS TIMESTAMP)
			END AS PICKUP_TIME,
	 
			CASE
				WHEN DISTANCE = 'null' THEN NULL
				ELSE CAST(REPLACE(TRIM(DISTANCE), 'km', '') AS NUMERIC)
			END AS DISTANCE,
	 
			CASE
				WHEN DURATION = 'null' THEN NULL
				ELSE CAST(SUBSTRING(DURATION, '[0-9]+') AS NUMERIC)
			END AS DURATION_MINS, -- assuming null or empty string means cancelled
	 
			CASE 
				WHEN CANCELLATION IN ('', 'null') OR CANCELLATION IS NULL THEN 0
				ELSE 1
				END AS CANCELLATION
		FROM PIZZA_RUNNER.RUNNER_ORDERS)


-- Cleaning customer_orders
CREATE OR REPLACE VIEW CUSTOMER_ORDERS_CLEANED AS ( WITH CUSTOMER_ORDERS AS
	(SELECT ORDER_ID,
			CUSTOMER_ID,
			PIZZA_ID, 
	 -- adding a 'null' to where appropriate - to be replaced later
 	 -- if not added, nulls would be removed when unnesting in the next cte
			CASE
				WHEN EXCLUSIONS IN ('') THEN 'null'
				ELSE EXCLUSIONS
				END AS EXCLUSIONS,
	 
			CASE
				WHEN EXTRAS = '' OR EXTRAS IS NULL THEN 'null'
				ELSE EXTRAS
				END AS EXTRAS,
	 
			ORDER_TIME
		FROM PIZZA_RUNNER.CUSTOMER_ORDERS),

CUSTOMER_ORDERS_INTERMEDIATE AS (
SELECT ORDER_ID,
	CUSTOMER_ID,
	PIZZA_ID, 
	-- string_to_array then unnest to remove comma into a new row
 	UNNEST(STRING_TO_ARRAY(EXCLUSIONS, ', ')) AS EXCLUSIONS,
	UNNEST(STRING_TO_ARRAY(EXTRAS, ', ')) AS EXTRAS,
	ORDER_TIME,
	EXTRACT(HOUR FROM ORDER_TIME) AS ORDER_HOUR,
	TO_CHAR(ORDER_TIME, 'Day') AS DAY_OF_WEEK
FROM CUSTOMER_ORDERS
)

	SELECT ORDER_ID,
	CUSTOMER_ID,
	PIZZA_ID,
												   
	CAST(CASE
		WHEN EXCLUSIONS = 'null' THEN NULL
		ELSE EXCLUSIONS
		END AS NUMERIC) AS EXCLUSIONS,
												   
	CAST(CASE
		WHEN EXTRAS = 'null' THEN NULL
		ELSE EXTRAS
		END AS NUMERIC) AS EXTRAS,
	ORDER_TIME,
	ORDER_HOUR,
	DAY_OF_WEEK
FROM CUSTOMER_ORDERS_INTERMEDIATE
)

-- Cleaning pizza_toppings
CREATE OR REPLACE VIEW PIZZA_TOPPINGS_CLEANED AS
	(WITH PIZZA_RECIPE AS
			(SELECT PIZZA_ID,
					CAST(UNNEST(STRING_TO_ARRAY(TOPPINGS, ', ')) AS NUMERIC) AS TOPPING_ID
				FROM PIZZA_RUNNER.PIZZA_RECIPES) 
	 
SELECT PIZZA_ID,
	TOPPING_ID,
	TOPPING_NAME
FROM PIZZA_RECIPE
INNER JOIN PIZZA_RUNNER.PIZZA_TOPPINGS USING (TOPPING_ID)
ORDER BY PIZZA_ID, TOPPING_ID)


-- 1. How many pizzas were ordered?
SELECT COUNT(*) AS n_pizzas 
FROM pizza_runner.customer_orders


-- 2. How many unique customer orders were made?
SELECT CUSTOMER_ID,
	COUNT(DISTINCT ORDER_ID) AS UNIQUE_CUSTOMERS
FROM PIZZA_RUNNER.CUSTOMER_ORDERS
GROUP BY 1

-- 3. How many successful orders were delivered by each runner?
SELECT RUNNER_ID,
	COUNT(*) AS N_SUCCESSFUL
FROM RUNNER_ORDERS_CLEANED
WHERE CANCELLATION = 0
GROUP BY 1


-- 4. How many of each type of pizza was delivered?
WITH COMBINED AS
	(SELECT *
		FROM PIZZA_RUNNER.CUSTOMER_ORDERS
		INNER JOIN PIZZA_RUNNER.PIZZA_NAMES USING (PIZZA_ID)
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT PIZZA_NAME,
	COUNT(*) AS N_PIZZAS
FROM COMBINED
GROUP BY 1
ORDER BY 1, 2


-- 5. How many Vegetarian and Meatlovers were ordered by each customer?
WITH COMBINED AS
	(SELECT *
		FROM PIZZA_RUNNER.CUSTOMER_ORDERS
		LEFT JOIN PIZZA_RUNNER.PIZZA_NAMES USING (PIZZA_ID)
		LEFT JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT CUSTOMER_ID,
	SUM(CASE WHEN PIZZA_NAME = 'Meatlovers' THEN 1
		ELSE 0
		END) AS N_MEATLOVERS,
		
	SUM(CASE
		WHEN PIZZA_NAME = 'Vegetarian' THEN 1
		ELSE 0
		END) AS N_VEGETARIAN
FROM COMBINED
GROUP BY 1
ORDER BY 1


-- 6. What was the maximum number of pizzas delivered in a single order?
WITH COMBINED AS
	(SELECT *
		FROM PIZZA_RUNNER.CUSTOMER_ORDERS
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT ORDER_ID,
	COUNT(*) AS N_PIZZAS
FROM COMBINED
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1

-- 7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
WITH COMBINED AS
	(SELECT *
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT CUSTOMER_ID,
	SUM(CASE
		WHEN EXCLUSIONS IS NOT NULL OR EXTRAS IS NOT NULL THEN 1
		ELSE 0
		END) AS N_AT_LEAST_1_CHANGE,
			
	SUM(CASE
		WHEN EXCLUSIONS IS NULL AND EXTRAS IS NULL THEN 1
		ELSE 0
		END) AS N_NO_CHANGE
			
FROM COMBINED
GROUP BY 1
ORDER BY 1

-- 8. How many pizzas were delivered that had both exclusions and extras?
WITH COMBINED AS
	(SELECT *
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT COUNT(DISTINCT ORDER_ID) AS N_PIZZAS
FROM COMBINED
WHERE EXCLUSIONS IS NOT NULL
	AND EXTRAS IS NOT NULL


-- 9. What was the total volume of pizzas ordered for each hour of the day?
SELECT ORDER_HOUR,
	COUNT(*) AS N_ORDERS
FROM CUSTOMER_ORDERS_CLEANED
GROUP BY 1
ORDER BY 1


-- 10. What was the volume of orders for each day of the week?
SELECT DAY_OF_WEEK,
	COUNT(*) AS N_ORDERS
FROM CUSTOMER_ORDERS_CLEANED
GROUP BY 1
ORDER BY 1

/* 
	B: Runner and Customer Experience
*/

-- 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
WITH WEEK_NUMS AS
	(SELECT *,
		CASE 
		-- '2021-01-01' is the starting week so change to 1
	 		WHEN DATE_PART('week', REGISTRATION_DATE) = 53 THEN 1
			ELSE DATE_PART('week', REGISTRATION_DATE) + 1
			END AS WEEK_NUM
		FROM PIZZA_RUNNER.RUNNERS)
		
SELECT WEEK_NUM,
	COUNT(RUNNER_ID) AS N_RUNNERS
FROM WEEK_NUMS
GROUP BY 1
ORDER BY 1


-- 2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
WITH COMBINED AS
	(SELECT RUNNER_ID,
			ORDER_ID,
			ORDER_TIME,
			PICKUP_TIME
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 ),
		
	ARRIVAL_TIMES AS
	(SELECT RUNNER_ID,
			ORDER_ID,
			EXTRACT(MINUTE FROM (PICKUP_TIME - ORDER_TIME)) 
	 			+ EXTRACT(SECOND FROM (PICKUP_TIME - ORDER_TIME)) / 60 AS TIME_TO_ARRIVE
		FROM COMBINED
		WHERE PICKUP_TIME - ORDER_TIME IS NOT NULL )
		
SELECT RUNNER_ID,
	ROUND(AVG(TIME_TO_ARRIVE), 2) AS AVG_TIME_TO_ARRIVE
FROM ARRIVAL_TIMES
GROUP BY 1
ORDER BY 1

-- 3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH COMBINED AS
	(SELECT RUNNER_ID,
			ORDER_ID,
			ORDER_TIME,
			PICKUP_TIME
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 ),
		
	ARRIVAL_TIMES AS
	(SELECT ORDER_ID,
			EXTRACT(MINUTE FROM (PICKUP_TIME - ORDER_TIME)) 
	 			+ EXTRACT(SECOND FROM (PICKUP_TIME - ORDER_TIME)) / 60 AS PREP_TIME_MINS
		FROM COMBINED
		WHERE PICKUP_TIME - ORDER_TIME IS NOT NULL ),
		
	NUM_PIZZAS AS
	(SELECT COUNT(ORDER_ID) AS NUM_PIZZA,
			SUM(PREP_TIME_MINS) AS TOTAL_PREP_TIME_MINS
		FROM ARRIVAL_TIMES
		GROUP BY ORDER_ID)
		
SELECT NUM_PIZZA,
	ROUND(AVG(TOTAL_PREP_TIME_MINS),
		2) AS AVG_PREP_TIME_MINS
FROM NUM_PIZZAS
GROUP BY 1
ORDER BY 1

-- 4. What was the average distance travelled for each customer?
WITH COMBINED AS
	(SELECT CUSTOMER_ID,
			DISTANCE
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT CUSTOMER_ID,
	ROUND(AVG(DISTANCE), 2) AS AVG_DIST
FROM COMBINED
GROUP BY 1
ORDER BY 1

-- 5. What was the difference between the longest and shortest delivery times for all orders?
WITH COMBINED AS
	(SELECT DISTINCT ORDER_ID,
			DURATION_MINS
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID)
		WHERE CANCELLATION = 0 )
		
SELECT MAX(DURATION_MINS) AS LONGEST_DELIVERY_MINS,
	MIN(DURATION_MINS) AS SHORTEST_DELIVERY_MINS,
	MAX(DURATION_MINS) - MIN(DURATION_MINS) AS DIFFERENCE_MINS
FROM COMBINED


-- 6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
WITH COMBINED AS
	(SELECT ORDER_ID,
			RUNNER_ID,
			DISTANCE,
			DURATION_MINS / 60 AS DURATION_HRS
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN RUNNER_ORDERS_CLEANED USING (ORDER_ID) -- order is only delivering then there is no cancellation

		WHERE CANCELLATION = 0 )
SELECT DISTINCT ORDER_ID,
	RUNNER_ID, 
	-- average speed since total distance/total time and not avg aggregation function
 ROUND(DISTANCE / DURATION_HRS, 2) AS AVG_SPEED_KMPH
FROM COMBINED


-- 7. What is the successful delivery percentage for each runner?
SELECT 
	RUNNER_ID,
	SUM(CASE WHEN CANCELLATION = 0 THEN 1 ELSE 0 END) AS SUCCESFUL_ORDERS,
	COUNT(*) AS N_ORDERS,
	ROUND(CAST(SUM(CASE WHEN CANCELLATION = 0 THEN 1 ELSE 0 END) AS NUMERIC)/CAST(COUNT(*) AS NUMERIC) * 100, 2) AS SUCCESS_PERC
FROM RUNNER_ORDERS_CLEANED
GROUP BY 1
ORDER BY 1

/*
	C: Ingredient Optimisation
*/
-- 1. What are the standard ingredients for each pizza?
SELECT 
	*
FROM pizza_toppings_cleaned 


-- 2. What was the most commonly added extra?
WITH MOST_COMMON_EXTRA AS
	(SELECT EXTRAS,
			COUNT(*) AS N_TIMES
		FROM CUSTOMER_ORDERS_CLEANED
		WHERE EXTRAS IS NOT NULL
		GROUP BY 1)
		
SELECT DISTINCT TOPPING_NAME,
	N_TIMES
FROM MOST_COMMON_EXTRA AS A
INNER JOIN PIZZA_TOPPINGS_CLEANED AS B ON A.EXTRAS = B.TOPPING_ID
ORDER BY N_TIMES DESC
LIMIT 1


-- 3. What was the most common exclusion?
WITH MOST_COMMON_EXCLUSION AS
	(SELECT EXCLUSIONS,
			COUNT(*) AS N_TIMES
		FROM CUSTOMER_ORDERS_CLEANED
		WHERE EXCLUSIONS IS NOT NULL
		GROUP BY 1)
		
SELECT DISTINCT TOPPING_NAME,
	N_TIMES
FROM MOST_COMMON_EXCLUSION AS A
INNER JOIN PIZZA_TOPPINGS_CLEANED AS B ON A.EXCLUSIONS = B.TOPPING_ID
ORDER BY N_TIMES DESC
LIMIT 1

-- 4. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
WITH DELIVERED AS
	(SELECT ORDER_ID
		FROM RUNNER_ORDERS_CLEANED
		WHERE CANCELLATION = 0 ),
		
	TOPPINGS AS
	(SELECT PIZZA_ID,
			TOPPING_ID,
			TOPPING_NAME
		FROM PIZZA_TOPPINGS_CLEANED),
		
	ORDERS AS
	(SELECT ORDER_ID,
			PIZZA_ID
		FROM CUSTOMER_ORDERS_CLEANED),
		
	EXCLUSIONS AS
	(SELECT EXCLUSIONS,
			COUNT(*) AS N_EXCLUDE
		FROM CUSTOMER_ORDERS_CLEANED
		WHERE EXCLUSIONS IS NOT NULL
		GROUP BY EXCLUSIONS),
		
	EXTRAS AS
	(SELECT EXTRAS,
			COUNT(*) AS N_EXTRAS
		FROM CUSTOMER_ORDERS_CLEANED
		WHERE EXTRAS IS NOT NULL
		GROUP BY EXTRAS),
		
	N_TOPPINGS AS
	(SELECT TOPPING_NAME,
			TOPPING_ID,
			COUNT(*) AS COUNTS
		FROM ORDERS AS O
		INNER JOIN DELIVERED AS D USING (ORDER_ID)
		INNER JOIN TOPPINGS AS T USING (PIZZA_ID)
		GROUP BY TOPPING_NAME, TOPPING_ID)
		
SELECT TOPPING_NAME,
	COUNTS
FROM N_TOPPINGS
ORDER BY COUNTS DESC


/*
	D: Pricing and Ratings
*/

-- 1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
WITH COMBINED AS
	(SELECT PIZZA_NAME
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN PIZZA_RUNNER.PIZZA_NAMES USING (PIZZA_ID)),
		
	NUM_PIZZAS AS
	(SELECT PIZZA_NAME,
			COUNT(*) AS N_PIZZAS
		FROM COMBINED
		GROUP BY 1),
		
	REVENUE AS
	(SELECT SUM(CASE
			WHEN PIZZA_NAME = 'Meatlovers' THEN N_PIZZAS * 12
			ELSE N_PIZZAS * 10
			END) AS TOTAL_REVENUE
		FROM NUM_PIZZAS)

SELECT *
FROM REVENUE

-- 2. What if there was an additional $1 charge for any pizza extras?
--    Add cheese is $1 extra
WITH COMBINED AS
	(SELECT PIZZA_NAME,
			EXTRAS
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN PIZZA_RUNNER.PIZZA_NAMES USING (PIZZA_ID)),
		
	NUM_PIZZAS AS
	(SELECT PIZZA_NAME,
			EXTRAS,
			COUNT(*) AS N_PIZZAS
		FROM COMBINED
		GROUP BY 1, 2),
		
	REVENUE AS
	(SELECT SUM(CASE
			WHEN PIZZA_NAME = 'Meatlovers' AND EXTRAS IS NOT NULL THEN N_PIZZAS * (12 + 1)
			WHEN PIZZA_NAME = 'Vegetarian' AND EXTRAS IS NOT NULL THEN N_PIZZAS * (10 + 1)
			WHEN PIZZA_NAME = 'Meatlovers' AND EXTRAS IS NULL THEN N_PIZZAS * 12
			ELSE N_PIZZAS * 10
			END) AS TOTAL_REVENUE
		FROM NUM_PIZZAS)
		
SELECT *
FROM REVENUE

-- 3. If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - how much money does Pizza Runner have left over after these deliveries?
WITH SUCCESSFUL_DELIVERIES AS
	(SELECT ORDER_ID,
			DISTANCE
		FROM RUNNER_ORDERS_CLEANED
		WHERE CANCELLATION = 0 ),
		
	COMBINED AS
	(SELECT PIZZA_NAME,
			COUNT(PIZZA_NAME) AS N_PIZZAS,
			SUM(DISTANCE) AS TOTAL_DISTANCE
		FROM CUSTOMER_ORDERS_CLEANED
		INNER JOIN PIZZA_RUNNER.PIZZA_NAMES USING (PIZZA_ID)
		INNER JOIN SUCCESSFUL_DELIVERIES USING (ORDER_ID)
		GROUP BY 1),
		
	REVENUE AS
	(SELECT SUM(CASE
			WHEN PIZZA_NAME = 'Meatlovers' THEN N_PIZZAS * 12 - TOTAL_DISTANCE * 0.3
			ELSE N_PIZZAS * 10 - TOTAL_DISTANCE * 0.3
			END) AS TOTAL_PROFIT
		FROM COMBINED)
		
SELECT *
FROM REVENUE
